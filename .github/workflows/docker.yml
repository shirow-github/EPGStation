name: Docker

on:
  push:
    branches:
      - master
    tags:
      - '*'

env:
  MAIN_DISTRO: debian

jobs:
  build:
    strategy:
      matrix:
        distro:
          - debian
        include:
          - distro: debian
            platforms: >-
              linux/amd64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Docker tags
        id: docker-tags
        run: |
          IMAGE="${{ secrets.DOCKERHUB_IMAGE }}"
          if echo "$GITHUB_REF" | grep -e '^refs/heads/' >/dev/null 2>&1; then
            GIT_BRANCH=$(echo "$GITHUB_REF" | sed -e 's|^refs/heads/||')
            MAIN_TAG="$IMAGE:$GIT_BRANCH-${{ matrix.distro }}"
            TAGS="$MAIN_TAG"
            if [ "$MAIN_DISTRO" = "${{ matrix.distro }}" ]; then
              TAGS="$TAGS,$IMAGE:$GIT_BRANCH"
            fi
          else
            GIT_TAG=$(echo "$GITHUB_REF" | sed -e 's|^refs/tags/||')
            MAIN_TAG="$IMAGE:$GIT_TAG-${{ matrix.distro }}"
            TAGS="$MAIN_TAG"
            if [ "$MAIN_DISTRO" = "${{ matrix.distro }}" ]; then
              TAGS="$TAGS,$IMAGE:$GIT_TAG"
            fi
            # Always update latest image tags when a new git tag is created.
            #
            # You need to change the condition like below if you want to update latest image tags
            # only when a v2 git tag is created:
            #
            #   if npx semver -r '">1"' "$GIT_TAG" >/dev/null 2>&1; then
            #     # update latest image tags
            #   fi
            #
            TAGS="$TAGS,$IMAGE:${{ matrix.distro }}"
            if [ "$MAIN_DISTRO" = "${{ matrix.distro }}" ]; then
              TAGS="$TAGS,$IMAGE:latest"
            fi
          fi
          echo "Main tag: $MAIN_TAG"
          echo "Tags: $TAGS"
          echo "{main-tag}={$MAIN_TAG}" >> $GITHUB_OUTPUT
          echo "{tags}={$TAGS}" >> $GITHUB_OUTPUT
      - name: Setup QEMU user-mode emulation
        uses: docker/setup-qemu-action@v3
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.distro }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.distro }}-
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.${{ matrix.distro }}
          platforms: ${{ matrix.platforms }}
          tags: ${{ steps.docker-tags.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: true
